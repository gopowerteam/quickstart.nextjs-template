/**
 * This file is generated by the RequestConfigGenerator.
 * Do not edit.
 */
import { Request, RequestParams } from '@gopowerteam/http-request'
import type { Observable } from 'rxjs'
import { TrainingController } from '@/http/controller/learn-service/training.controller'
import { TrainingDetail, Training, SignResult, TrainingSaleInfo, TrainingReleaseInfo, TrainingStudent, SignConfigResponse, TrainingQuestion, Question, TrainingStudentGroup, TrainingSignRecord, TrainingOrder, TrainingOrderDetail } from '@/http/model/learn-service.model'

export class TrainingService {
  /**
   * 活动详情
   */
  @Request({
    server: TrainingController.getTrainingDetail,
    model: TrainingDetail
  })
  public getTrainingDetail(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingDetail> {
    return RequestParams.create(params).request();
  }
  /**
   * 更新基本信息
   */
  @Request({
    server: TrainingController.updateTrainingDetail,
    model: TrainingDetail
  })
  public updateTrainingDetail(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingDetail> {
    return RequestParams.create(params).request();
  }
  /**
   * 更新活动状态
   */
  @Request({
    server: TrainingController.changeStatus,
    model: Training
  })
  public changeStatus(
    params?: RequestParams | { [key: string]: any }
  ): Observable<Training> {
    return RequestParams.create(params).request();
  }
  /**
   * 用户签到
   */
  @Request({
    server: TrainingController.trainingSignIn,
    model: SignResult
  })
  public trainingSignIn(
    params?: RequestParams | { [key: string]: any }
  ): Observable<SignResult> {
    return RequestParams.create(params).request();
  }
  /**
   * 获取营销配置
   */
  @Request({
    server: TrainingController.getTrainingSaleConfig,
    model: TrainingSaleInfo
  })
  public getTrainingSaleConfig(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingSaleInfo> {
    return RequestParams.create(params).request();
  }
  /**
   * 更新营销配置
   */
  @Request({
    server: TrainingController.updateTrainingSaleConfig,
    model: TrainingSaleInfo
  })
  public updateTrainingSaleConfig(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingSaleInfo> {
    return RequestParams.create(params).request();
  }
  /**
   * 培训发布配置
   */
  @Request({
    server: TrainingController.getTrainingRelease,
    model: TrainingReleaseInfo
  })
  public getTrainingRelease(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingReleaseInfo> {
    return RequestParams.create(params).request();
  }
  /**
   * 获取培训发布配置
   */
  @Request({
    server: TrainingController.updateTrainingRelease,
    model: TrainingReleaseInfo
  })
  public updateTrainingRelease(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingReleaseInfo> {
    return RequestParams.create(params).request();
  }
  /**
   * 活动列表(分页)
   */
  @Request({
    server: TrainingController.getTrainings,
    model: TrainingDetail
  })
  public getTrainings(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingDetail[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 创建活动
   */
  @Request({
    server: TrainingController.createTraining,
    model: TrainingDetail
  })
  public createTraining(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingDetail> {
    return RequestParams.create(params).request();
  }
  /**
   * （分页）获取学员例表
   */
  @Request({
    server: TrainingController.getTrainingStudents,
    model: TrainingStudent
  })
  public getTrainingStudents(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingStudent[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 增加临时学员
   */
  @Request({
    server: TrainingController.addStudent,
    model: TrainingStudent
  })
  public addStudent(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingStudent> {
    return RequestParams.create(params).request();
  }
  /**
   * 获取签到配置
   */
  @Request({
    server: TrainingController.queryAllSignConfig,
    model: SignConfigResponse
  })
  public queryAllSignConfig(
    params?: RequestParams | { [key: string]: any }
  ): Observable<SignConfigResponse[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 增加签到
   */
  @Request({
    server: TrainingController.configTrainingSign,
  })
  public configTrainingSign(
    params?: RequestParams | { [key: string]: any }
  ): Observable<any> {
    return RequestParams.create(params).request();
  }
  /**
   * 获取全部的问题
   */
  @Request({
    server: TrainingController.getAllQuestions,
    model: TrainingQuestion
  })
  public getAllQuestions(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingQuestion[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 给培训增加提问
   */
  @Request({
    server: TrainingController.postQuestion,
    model: Question
  })
  public postQuestion(
    params?: RequestParams | { [key: string]: any }
  ): Observable<Question> {
    return RequestParams.create(params).request();
  }
  /**
   * 分组查看（学员）
   */
  @Request({
    server: TrainingController.getTrainingGroupStudents,
    model: TrainingStudentGroup
  })
  public getTrainingGroupStudents(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingStudentGroup[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 启动分组
   */
  @Request({
    server: TrainingController.group,
  })
  public group(
    params?: RequestParams | { [key: string]: any }
  ): Observable<any> {
    return RequestParams.create(params).request();
  }
  /**
   * 把学员加入某个组
   */
  @Request({
    server: TrainingController.addStudentToGroup,
  })
  public addStudentToGroup(
    params?: RequestParams | { [key: string]: any }
  ): Observable<any> {
    return RequestParams.create(params).request();
  }
  /**
   * 搜索学员，包括分组与未分组的
   */
  @Request({
    server: TrainingController.searchStudent,
    model: TrainingStudent
  })
  public searchStudent(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingStudent[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 学员签到列表
   */
  @Request({
    server: TrainingController.trainingSignRecord,
    model: TrainingSignRecord
  })
  public trainingSignRecord(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingSignRecord[]> {
    return RequestParams.create(params).request();
  }
  /**
   * （分页）获取全部单订单(admin)
   */
  @Request({
    server: TrainingController.getTrainingOrders,
    model: TrainingOrder
  })
  public getTrainingOrders(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingOrder[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 获取订单详情
   */
  @Request({
    server: TrainingController.getTrainingOrderDetail,
    model: TrainingOrderDetail
  })
  public getTrainingOrderDetail(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingOrderDetail> {
    return RequestParams.create(params).request();
  }
  /**
   * 活动列表(上架的All)
   */
  @Request({
    server: TrainingController.getTrainingOns,
    model: TrainingDetail
  })
  public getTrainingOns(
    params?: RequestParams | { [key: string]: any }
  ): Observable<TrainingDetail[]> {
    return RequestParams.create(params).request();
  }
  /**
   * 从培训中移出学员
   */
  @Request({
    server: TrainingController.removeStudent,
  })
  public removeStudent(
    params?: RequestParams | { [key: string]: any }
  ): Observable<any> {
    return RequestParams.create(params).request();
  }
  /**
   * 从培训的分组中删除某个学员
   */
  @Request({
    server: TrainingController.removeStudentGroup,
  })
  public removeStudentGroup(
    params?: RequestParams | { [key: string]: any }
  ): Observable<any> {
    return RequestParams.create(params).request();
  }
  /**
   * 清除分组
   */
  @Request({
    server: TrainingController.clearGroup,
  })
  public clearGroup(
    params?: RequestParams | { [key: string]: any }
  ): Observable<any> {
    return RequestParams.create(params).request();
  }
}
